version: "3.8"

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:6.1.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data 
      - zookeeper-log:/var/lib/zookeeper/log
  broker:
    image: confluentinc/cp-kafka:6.1.0
    container_name: broker
    ports: 
      - "19092:19092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:9092,CONNECTIONS_FROM_HOST://localhost:19092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,CONNECTIONS_FROM_HOST:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    volumes:
      - broker-data:/var/lib/kafka/data
  kafdrop:
    image: obsidiandynamics/kafdrop:3.27.0
    container_name: kafdrop
    restart: unless-stopped
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: "broker:9092"
      JVM_OPTS: "-Xms16M -Xmx48M -Xss180K -XX:-TieredCompilation -XX:+UseStringDeduplication -noverify"
    depends_on:
      - broker
  redis:
    image: redis:6.2.1
    restart: unless-stopped
    container_name: coinredis
    command: redis-server --appendonly yes
    ports:
      - '${REDIS_EXPOSED_PORT}:6379'
    volumes:
      - redis-data:/data
      # - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
  db:
    image: timescale/timescaledb:2.1.0-pg13
    restart: unless-stopped
    container_name: coindb
    ports: 
      - '${POSTGRES_EXPOSED_PORT}:5432'
    environment:
      - POSTGRES_DB
      - POSTGRES_USER
      - POSTGRES_PASSWORD
    volumes:
      - db-data:/var/lib/postgresql/data
  backoffice:
    container_name: coinbackoffice
    restart: "no"
    build:
      context: backoffice
      dockerfile: Dockerfile
    ports: 
      - '${BACKOFFICE_EXPOSED_PORT}:3000'
    environment:
      - NODE_ENV
      - POSTGRES_URI=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      - KAFKA_BROKER_HOST=broker:9092
      - KAFKA_CLIENT_ID=backoffice_admin
    depends_on:
      - db
    command: bash -c "sleep 30 && cd /usr/src/app && npm install && npm run start"
    volumes:
      - ./backoffice:/usr/src/app
      - /usr/src/app/node_modules
  scraper:
    container_name: scraper
    restart: unless-stopped
    build:
      context: scraper
      dockerfile: Dockerfile
    environment: 
      - NODE_ENV
      - POSTGRES_URI=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      - REDIS_URI=redis://redis:6379
      - KAFKA_BROKER_HOST=broker:9092
      - KAFKA_CLIENT_ID=nodejs_1
    depends_on:
      - db
      - redis
      - broker
    command: bash -c "sleep 40 && cd /usr/src/app && npm install && npm run start"
    volumes:
      - ./scraper:/usr/src/app
      - /usr/src/app/node_modules
  normalizer:
    container_name: normalizer
    restart: unless-stopped
    build:
      context: normalizer
      dockerfile: Dockerfile
    depends_on: 
      - broker
    environment: 
      PYTHONUNBUFFERED: 1
    entrypoint: 
      - bash 
      - -c 
      - |
        echo 'Giving Kafka a bit of time to start upâ€¦'
        sleep 40
        python /usr/src/app/index.py
    volumes:
      - ./normalizer:/usr/src/app

volumes:
  zookeeper-data:
  zookeeper-log:
  broker-data:
  redis-data:
  db-data: